// frontend/components/chat/Message/StreamingMessage.js
import React, { useEffect, useRef } from 'react';
import { Timer } from 'lucide-react';
import MessageContent from './MessageContent';

const StreamingMessage = ({ 
  content, 
  aiType, 
  timestamp,
  parsedContent,
  isComplete,
  onContentUpdate 
}) => {
  const messageRef = useRef(null);
  const lastStreamTime = useRef(Date.now());
  const streamBuffer = useRef('');

  useEffect(() => {
    if (messageRef.current) {
      messageRef.current.scrollIntoView({
        behavior: 'smooth',
        block: 'end'
      });
    }
  }, [content]);

  return (
    <div className="message-wrapper ai-message">
      <div className="message-content">
        <div className="profile-image">
          <div className={`avatar ${!isComplete ? 'typing' : ''}`}>
            {aiType === 'wayneAI' ? 'W' : 'C'}
          </div>
        </div>
        <div className="message-bubble-container">
          <div className="sender-name">
            {aiType === 'wayneAI' ? 'Wayne AI' : 'Consulting AI'}
            {!isComplete && (
              <div className="typing-indicator">
                <Timer className="animate-pulse" size={16} />
                <div className="dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            )}
          </div>
          <div className="message-bubble" ref={messageRef}>
            <MessageContent 
              content={content} 
              isAI={true}
              isStreaming={!isComplete}
            />
          </div>
          <div className="message-info">
            <span className="timestamp">
              {new Date(timestamp).toLocaleString('ko-KR')}
            </span>
            {!isComplete && (
              <span className="streaming-status">
                응답 생성 중...
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default StreamingMessage;